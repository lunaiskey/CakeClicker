--- a/net/minecraft/world/item/crafting/LegacyUpgradeRecipe.java
+++ b/net/minecraft/world/item/crafting/LegacyUpgradeRecipe.java
@@ -10,18 +10,31 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_19_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_19_R3.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.v1_19_R3.inventory.CraftSmithingRecipe;
+import org.bukkit.craftbukkit.v1_19_R3.util.CraftNamespacedKey;
+import org.bukkit.inventory.Recipe;
+// CraftBukkit end
 
 /** @deprecated */
-@Deprecated(
-    forRemoval = true
-)
+@Deprecated(forRemoval = true)
 public class LegacyUpgradeRecipe implements SmithingRecipe {
+
     final Ingredient base;
     final Ingredient addition;
     final ItemStack result;
     private final ResourceLocation id;
+    final boolean copyNBT; // Paper
 
     public LegacyUpgradeRecipe(ResourceLocation id, Ingredient base, Ingredient addition, ItemStack result) {
+        // Paper start
+        this(id, base, addition, result, true);
+    }
+    public LegacyUpgradeRecipe(ResourceLocation id, Ingredient base, Ingredient addition, ItemStack result, boolean copyNBT) {
+        this.copyNBT = copyNBT;
+        // Paper end
         this.id = id;
         this.base = base;
         this.addition = addition;
@@ -35,13 +48,16 @@
 
     @Override
     public ItemStack assemble(Container inventory, RegistryAccess registryManager) {
-        ItemStack itemStack = this.result.copy();
-        CompoundTag compoundTag = inventory.getItem(0).getTag();
-        if (compoundTag != null) {
-            itemStack.setTag(compoundTag.copy());
+        ItemStack itemstack = this.result.copy();
+        if (this.copyNBT) { // Paper - copy nbt conditionally
+        CompoundTag nbttagcompound = inventory.getItem(0).getTag();
+
+        if (nbttagcompound != null) {
+            itemstack.setTag(nbttagcompound.copy());
         }
+        } // Paper
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
@@ -81,29 +97,44 @@
 
     @Override
     public boolean isIncomplete() {
-        return Stream.of(this.base, this.addition).anyMatch((ingredient) -> {
-            return ingredient.getItems().length == 0;
+        return Stream.of(this.base, this.addition).anyMatch((recipeitemstack) -> {
+            return recipeitemstack.getItems().length == 0;
         });
     }
 
+    // CraftBukkit start
+    @Override
+    public Recipe toBukkitRecipe() {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+
+        CraftSmithingRecipe recipe = new CraftSmithingRecipe(CraftNamespacedKey.fromMinecraft(this.id), result, CraftRecipe.toBukkit(this.base), CraftRecipe.toBukkit(this.addition), this.copyNBT); // Paper
+
+        return recipe;
+    }
+    // CraftBukkit end
+
     public static class Serializer implements RecipeSerializer<LegacyUpgradeRecipe> {
+
+        public Serializer() {}
+
         @Override
-        public LegacyUpgradeRecipe fromJson(ResourceLocation resourceLocation, JsonObject jsonObject) {
-            Ingredient ingredient = Ingredient.fromJson(GsonHelper.getAsJsonObject(jsonObject, "base"));
-            Ingredient ingredient2 = Ingredient.fromJson(GsonHelper.getAsJsonObject(jsonObject, "addition"));
-            ItemStack itemStack = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(jsonObject, "result"));
-            return new LegacyUpgradeRecipe(resourceLocation, ingredient, ingredient2, itemStack);
+        public LegacyUpgradeRecipe fromJson(ResourceLocation id, JsonObject json) {
+            Ingredient recipeitemstack = Ingredient.fromJson(GsonHelper.getAsJsonObject(json, "base"));
+            Ingredient recipeitemstack1 = Ingredient.fromJson(GsonHelper.getAsJsonObject(json, "addition"));
+            ItemStack itemstack = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(json, "result"));
+
+            return new LegacyUpgradeRecipe(id, recipeitemstack, recipeitemstack1, itemstack);
         }
 
         @Override
-        public LegacyUpgradeRecipe fromNetwork(ResourceLocation resourceLocation, FriendlyByteBuf friendlyByteBuf) {
-            Ingredient ingredient = Ingredient.fromNetwork(friendlyByteBuf);
-            Ingredient ingredient2 = Ingredient.fromNetwork(friendlyByteBuf);
-            ItemStack itemStack = friendlyByteBuf.readItem();
-            return new LegacyUpgradeRecipe(resourceLocation, ingredient, ingredient2, itemStack);
+        public LegacyUpgradeRecipe fromNetwork(ResourceLocation id, FriendlyByteBuf buf) {
+            Ingredient recipeitemstack = Ingredient.fromNetwork(buf);
+            Ingredient recipeitemstack1 = Ingredient.fromNetwork(buf);
+            ItemStack itemstack = buf.readItem();
+
+            return new LegacyUpgradeRecipe(id, recipeitemstack, recipeitemstack1, itemstack);
         }
 
-        @Override
         public void toNetwork(FriendlyByteBuf buf, LegacyUpgradeRecipe recipe) {
             recipe.base.toNetwork(buf);
             recipe.addition.toNetwork(buf);
